package org.binas.station.ws.cli;

import java.awt.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.Future;

import javax.xml.ws.AsyncHandler;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.Response;

import org.binas.station.ws.AccountView;
import org.binas.station.ws.BadInit_Exception;
import org.binas.station.ws.GetBalanceResponse;
import org.binas.station.ws.GetBinaResponse;
import org.binas.station.ws.GetInfoResponse;
import org.binas.station.ws.InvalidCredit_Exception;
import org.binas.station.ws.InvalidFormatEmail_Exception;
import org.binas.station.ws.NoBinaAvail_Exception;
import org.binas.station.ws.NoSlotAvail_Exception;
import org.binas.station.ws.ReturnBinaResponse;
import org.binas.station.ws.SetBalanceResponse;
import org.binas.station.ws.StationPortType;
import org.binas.station.ws.StationService;
import org.binas.station.ws.StationView;
import org.binas.station.ws.TestClearResponse;
import org.binas.station.ws.TestInitResponse;
import org.binas.station.ws.TestPingResponse;
import org.binas.station.ws.UserDoesNotExists_Exception;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;
import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINamingException;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class StationClient implements StationPortType {

	/** WS service */
	StationService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	StationPortType port = null;

	/** UDDI server URL */
	private String uddiURL = null;

	/** WS name */
	private String wsName = null;

	/** WS end point address */
	private String wsURL = null; // default value is defined inside WSDL

	public String getWsURL() {
		return wsURL;
	}

	public String getWsName()  {
		return wsName;
	}

	public void setWsName(String wsName) {
		this.wsName = wsName;
	}
	
	/** output option **/
	private boolean verbose = false;

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided web service URL */
	public StationClient(String wsURL) throws StationClientException {
		this.wsURL = wsURL;
		createStub();
	}

	/** constructor with provided UDDI location and name */
	public StationClient(String uddiURL, String wsName) throws StationClientException {
		this.uddiURL = uddiURL;
		this.wsName = wsName;
		uddiLookup();
		createStub();
	}

	/** UDDI lookup */
	private void uddiLookup() throws StationClientException {
		try {
			UDDINaming uddiNaming = new UDDINaming(this.uddiURL);
			this.wsURL = uddiNaming.lookup(this.wsName);
			if(this.wsURL == null){
				throw new StationClientException("The wsName = " + this.wsName + " doesn't exist!");
			}
		} catch (UDDINamingException e) {
			throw new StationClientException("Error connecting to UDDI.", e);
		}
	}


	/** Stub creation and configuration */
	private void createStub() {
		if (verbose)
			System.out.println("Creating stub ...");

		service = new StationService();

		port = service.getStationPort();
				
		if (this.wsURL != null) {
			if (verbose)
				System.out.println("Setting endpoint address ...");
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, this.wsURL);
			//set timeouts
			int timeout = 2000;
			final ArrayList<String> RECV_TIME_PROPS = new ArrayList<String>();
	        RECV_TIME_PROPS.add("com.sun.xml.ws.request.timeout");
	        RECV_TIME_PROPS.add("com.sun.xml.internal.ws.request.timeout");
	        RECV_TIME_PROPS.add("javax.xml.ws.client.receiveTimeout");
	        // Set timeout until the response is received (unit is milliseconds; 0 means infinite)
	        for (String propName : RECV_TIME_PROPS){
	            requestContext.put(propName, timeout);
	        }
	        System.out.printf("Set receive timeout to %d milliseconds%n", timeout);
		}
	}

	// remote invocation methods ----------------------------------------------

	@Override
	public StationView getInfo() {
		return port.getInfo();
	}
	//
	@Override
	public void getBina() throws NoBinaAvail_Exception {
		port.getBina();
	}
	//
	@Override
	public int returnBina() throws NoSlotAvail_Exception {
		return port.returnBina();
	}

	// test control operations ------------------------------------------------

	@Override
	public String testPing(String inputMessage) {
		return port.testPing(inputMessage);
	}
	//
	@Override
	public void testClear() {
		port.testClear();
	}
	//
	@Override
	public void testInit(int x, int y, int capacity, int returnPrize) throws BadInit_Exception {
	 port.testInit(x, y, capacity, returnPrize);
	}

	@Override
	public AccountView getBalance(String userEmail) throws InvalidFormatEmail_Exception, UserDoesNotExists_Exception {
		return port.getBalance(userEmail);
	}

	@Override
	public Response<SetBalanceResponse> setBalanceAsync(String userEmail, int credit, int tag, int clientID) {
		return port.setBalanceAsync(userEmail, credit, tag, clientID);
	}

	@Override
	public Future<?> setBalanceAsync(String userEmail, int credit, int tag, int clientID,
			AsyncHandler<SetBalanceResponse> asyncHandler) {
		return port.setBalanceAsync(userEmail, credit, tag, clientID, asyncHandler);
	}

	@Override
	public boolean setBalance(String userEmail, int credit, int tag, int clientID)
			throws InvalidCredit_Exception, InvalidFormatEmail_Exception {
		return port.setBalance(userEmail, credit, tag, clientID);
	}

	@Override
	public Response<GetInfoResponse> getInfoAsync() {
		return port.getInfoAsync();
	}

	@Override
	public Future<?> getInfoAsync(AsyncHandler<GetInfoResponse> asyncHandler) {
		return port.getInfoAsync(asyncHandler);
	}

	@Override
	public Response<GetBinaResponse> getBinaAsync() {
		return port.getBinaAsync();
	}

	@Override
	public Future<?> getBinaAsync(AsyncHandler<GetBinaResponse> asyncHandler) {
		return port.getBinaAsync(asyncHandler);
	}

	@Override
	public Response<ReturnBinaResponse> returnBinaAsync() {
		return port.returnBinaAsync();
	}

	@Override
	public Future<?> returnBinaAsync(AsyncHandler<ReturnBinaResponse> asyncHandler) {
		return port.returnBinaAsync(asyncHandler);
	}

	@Override
	public Response<GetBalanceResponse> getBalanceAsync(String userEmail) {
		return port.getBalanceAsync(userEmail);
	}

	@Override
	public Future<?> getBalanceAsync(String userEmail, AsyncHandler<GetBalanceResponse> asyncHandler) {
		return port.getBalanceAsync(userEmail, asyncHandler);
	}

	@Override
	public Response<TestPingResponse> testPingAsync(String inputMessage) {
		return port.testPingAsync(inputMessage);
	}

	@Override
	public Future<?> testPingAsync(String inputMessage, AsyncHandler<TestPingResponse> asyncHandler) {
		return port.testPingAsync(inputMessage, asyncHandler);
	}

	@Override
	public Response<TestClearResponse> testClearAsync() {
		return port.testClearAsync();
	}

	@Override
	public Future<?> testClearAsync(AsyncHandler<TestClearResponse> asyncHandler) {
		return port.testClearAsync(asyncHandler);
	}

	@Override
	public Response<TestInitResponse> testInitAsync(int x, int y, int capacity, int returnPrize) {
		return port.testInitAsync(x, y, capacity, returnPrize);
	}

	@Override
	public Future<?> testInitAsync(int x, int y, int capacity, int returnPrize,
			AsyncHandler<TestInitResponse> asyncHandler) {
		return port.testInitAsync(x, y, capacity, returnPrize, asyncHandler);
	}
}
